name: Extract Data from Multiple GFF3 Changes and Update Alias File (Fail Fast)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  extract-data:
    if: startsWith(github.event.pull_request.title, 'annotate') || startsWith(github.event.pull_request.title, 'annotation')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})
          echo "changed_files=$(echo "$DIFF" | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Process each changed GFF3 file
        id: process-gff3
        run: |
          error_occurred=false
          IFS=' ' read -ra CHANGED_FILES <<< "${{ steps.changed-files.outputs.changed_files }}"
          for FILE_PATH in "${CHANGED_FILES[@]}"; do
            if [[ "$FILE_PATH" =~ \.gff3$ ]]; then
              echo "Processing: $FILE_PATH"

              # Validate GFF3 format
              awk -F'\t' -v OFS='\t' -v file="$FILE_PATH" '
                BEGIN {
                  valid = 1
                }
                $1 ~ /^#/ { next } # Skip comment lines
                NF != 9 {
                  printf "Invalid number of fields (expected 9, found %d) on line %d in file %s\n", NF, NR, file
                  valid = 0
                  exit 1
                }
                $4 !~ /^[0-9]+$/ || $5 !~ /^[0-9]+$/ {
                  printf "Invalid start/end coordinates (fields 4 and 5 must be integers) on line %d in file %s\n", NR, file
                  valid = 0
                  exit 1
                }
                $7 !~ /^[\\+\\-\\.]?$/ {
                  printf "Invalid strand (field 7 must be +, -, or .) on line %d in file %s\n", NR, file
                  valid = 0
                  exit 1
                }
                END {
                  if (valid != 1) {
                    exit 1
                  }
                }' "$FILE_PATH"

              if [[ $? -ne 0 ]]; then
                echo "Error: Invalid GFF3 format in $FILE_PATH"
                error_occurred=true
                continue # Continue to the next file
              fi

              # Get added lines
              ADDED_LINES=$(git diff origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }} "$FILE_PATH" | grep '^+[^+#]' | sed 's/^+//')

              # Process each added line
              while IFS= read -r ADDED_LINE; do
                GENE_ID=$(echo "$ADDED_LINE" | awk -F'\t' '{split($9, a, ";"); for(i in a) { if (a[i] ~ /gene_id=/) { sub(/gene_id=/, "", a[i]); print a[i]; } }}')
                NAME=$(echo "$ADDED_LINE" | awk -F'\t' '{split($9, a, ";"); for(i in a) { if (a[i] ~ /name=/) { sub(/name=/, "", a[i]); print a[i]; } }}')

                # Error if name is missing
                if [ -z "$NAME" ]; then
                  echo "Error: 'name' attribute is missing in the GFF3 line: $ADDED_LINE in file $FILE_PATH"
                  error_occurred=true
                  continue # Continue to the next line
                fi

                # Get GitHub username
                USERNAME=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/user" | jq -r '.login')

                # Extract annotator or use GitHub username
                ANNOTATOR=$(echo "$ADDED_LINE" | awk -F'\t' '{split($9, a, ";"); for(i in a) { if (a[i] ~ /annotator=/) { sub(/annotator=/, "", a[i]); print a[i]; } }}')
                if [ -z "$ANNOTATOR" ] || [[ "$ANNOTATOR" == "null" ]] || [[ "$ANNOTATOR" == "NULL" ]]; then
                  ANNOTATOR="$USERNAME"
                fi

                # Get PR creation date
                PR_DATE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}" | jq -r '.created_at')

                # Check for existing entry and update gene_alias.tsv
                if ! grep -q -F "$GENE_ID"$'\t'"$NAME"$'\t'"$ANNOTATOR" gene_alias.tsv; then
                  echo -e "$GENE_ID\t$NAME\t$ANNOTATOR\t$PR_DATE" >> gene_alias.tsv
                else
                  echo "Warning: Entry already exists for GENE_ID=$GENE_ID, NAME=$NAME, ANNOTATOR=$ANNOTATOR. Skipping this line."
                fi
              done <<< "$ADDED_LINES"
            fi
          done

          if $error_occurred; then
            echo "Errors found during processing. Failing fast."
            exit 1
          fi

      - name: Commit and push changes
        if: steps.process-gff3.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update gene_alias.tsv with new entries from multiple GFF3 changes"
          branch: ${{ github.head_ref }}
          file_pattern: gene_alias.tsv